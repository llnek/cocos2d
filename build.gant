// This library is distributed in  the hope that it will be useful but without
// any  warranty; without  even  the  implied  warranty of  merchantability or
// fitness for a particular purpose.
// The use and distribution terms for this software are covered by the Eclipse
// Public License 1.0  (http://opensource.org/licenses/eclipse-1.0.php)  which
// can be found in the file epl-v10.html at the root of this distribution.
// By using this software in any  fashion, you are agreeing to be bound by the
// terms of this license. You  must not remove this notice, or any other, from
// this software.
// Copyright (c) 2013 Cherimoia, LLC. All rights reserved.

//////////////////////////////////////////////////////////////////////////////
// external tools
//////////////////////////////////////////////////////////////////////////////
import java.util.UUID

includeTool << gant.tools.Ivy

//////////////////////////////////////////////////////////////////////////////
// global properties
//////////////////////////////////////////////////////////////////////////////

property( name: 'gantProjectName' , value: 'cocos2d')
property( name: 'PID_DISTRO', value: "${gantProjectName}-distro")
property( name: "PID", value: "${gantProjectName}")
property( environment: "env" )
property( name: 'ivySettingsDir', value: "${basedir}")
loadproperties (srcFile: "${basedir}/build.xs") {}

//////////////////////////////////////////////////////////////////////////////
// language compilers
//////////////////////////////////////////////////////////////////////////////

ant.path (id: 'compile.path.id') {
  path (location: "${outJarDir}")
  path (location: "${buildDir}")
  path (location: "${srcDir}/clojure")
  fileset (dir: "${libDir}")
  fileset (dir: "${skaroHome}/dist")
  fileset (dir: "${skaroHome}/lib")
}

ant.path (id: 'test.path.id') {
  path (location: "${outTestDir}")
  path (location: "${testDir}/clojure")
  path (refid: "compile.path.id")
}

  /* =================================
        target: ivy stuff
       ================================= */

ivy.settings( file: "${ivySettingsDir}/ivy.config.xml" )

target (resolve: '') {
  // conf="*" will copie artifacts defined for each conf in a dir matching conf name
  ivy.retrieve( pattern: "${ivyLibDir}/[conf]/[artifact]-[revision].[ext]" )
}

target (report: '') {
  depends (resolve)
  ivy.report (todir: "${buildDir}")
}

target (cleanPublic: '') {
  doCleanPublic()
}

target (clean: '') {
  doClean()
}

target (clean_cache: '') {
  ivy.cleancache()
}

target (clean_local: '') {
  println "${ivyLRepoDir}"
}

//////////////////////////////////////////////////////////////////////////////
// (called by skaro)
target (buildr: '') {
  depends (clean,resolve,preBuild)
  println "#############################################"
  println "# building: ${gantProjectName}"
  println "#############################################"
  doCompileAndJar()
  doBuildWebApps()
}

//////////////////////////////////////////////////////////////////////////////
//
target (preBuild: '') {
  mkdir (dir: "${basedir}/POD-INF/classes")
  mkdir (dir: "${basedir}/POD-INF/lib")
  mkdir (dir: "${basedir}/POD-INF/patch")
  mkdir (dir: "${buildDir}")
  mkdir (dir: "${buildDir}/web_scripts")
  mkdir (dir: "${buildDir}/web_styles")
}

//////////////////////////////////////////////////////////////////////////////
// compile server-side source code
target (compileJava: '') {
  doCompileJava()
}

target (compileClj: '') {
  doCompileClj()
}

target (compileAndJar: '') {
  doCompileAndJar()
}

//////////////////////////////////////////////////////////////////////////////
//
target (cclj: '') {
  depends (clean,compileJava,compileClj)
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileAndJar() {
  doCompileJava()
  doCompileClj()
  //-- copy over other resources
  copy (todir: "${outJarDir}") {
    fileset (dir: "${srcDir}/clojure") {
      exclude (name: '**/*.clj')
    }
    fileset (dir: "${srcDir}/java") {
      exclude (name: '**/*.java')
    }
  }
  jar (destfile: "${libDir}/${PID}-${buildVersion}.jar") {
    fileset (dir: "${outJarDir}")
  }
}

//////////////////////////////////////////////////////////////////////////////
//
target (testBuild: '') {
  depends(buildr)
  doCompileTestCode()
  doRunTesTCode()
  println "Test called - OK"
}

target (compileTestCode: '') {
  doCompileTestCode()
}

target (runTestCode: '') {
  doRunTestCode()
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileTestCode() {
  mkdir (dir: "${outTestDir}")
  mkdir (dir: "${reportDir}")
}

//////////////////////////////////////////////////////////////////////////////
//
def doRunTestCode() {
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileJava() {
  javac (
         sourcepath: '',
         srcdir: "${srcDir}/java",
         destdir: "${outJarDir}",
         includeantruntime: 'false',
         excludes: '',
         target: '1.8',
         debug: "${buildDebug}",
         debuglevel: "lines,vars,source",
         classpathref: 'compile.path.id') {
    compilerarg (line: '-Xlint:deprecation -Xlint:unchecked')
    include (name: '**/*.java')
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileClj() {
  java (
        classname: 'clojure.lang.Compile',
        fork: 'true',
        failonerror: 'true',
        maxmemory: '2048m',
        classpathref: 'compile.path.id') {
    sysproperty (key: 'clojure.compile.warn-on-reflection', value: 'true')
    sysproperty (key: 'clojure.compile.path', value: "${buildDir}")
    arg (value: 'cmzlabclj.cocos2d.games.meta')
    arg (value: 'cmzlabclj.cocos2d.site.core')
    arg (value: 'cmzlabclj.cocos2d.users.accounts')
    arg (value: 'cmzlabclj.cocos2d.users.rego')
    arg (value: 'cmzlabclj.cocos2d.games.core')
    arg (value: 'cmzlabclj.cocos2d.util.core')
    arg (value: 'cmzlabclj.odin.system.util')
    arg (value: 'cmzlabclj.odin.event.core')
    arg (value: 'cmzlabclj.odin.event.disp')
    arg (value: 'cmzlabclj.odin.net.senders')
    arg (value: 'cmzlabclj.odin.system.rego')
    arg (value: 'cmzlabclj.odin.system.core')
    arg (value: 'cmzlabclj.odin.game.session')
    arg (value: 'cmzlabclj.odin.game.room')
    arg (value: 'cmzlabclj.odin.net.wsock')
    arg (value: 'cmzlabclj.frigga.tictactoe.board')
    arg (value: 'cmzlabclj.frigga.tictactoe.core')
    arg (value: 'cmzlabclj.frigga.pong.arena')
    arg (value: 'cmzlabclj.frigga.pong.core')
  }
  copy (todir: "${outJarDir}") {
    fileset (dir: "${buildDir}")
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doClean() {
  delete (includeemptydirs: 'true') {
    fileset (erroronmissingdir: 'false', dir: "${outJarDir}",  includes: '**/*')
    fileset (erroronmissingdir: 'false', dir: "${buildDir}", includes: '**/*')
    fileset (erroronmissingdir: 'false', dir: "${libDir}", includes: '**/*.jar')
  }
  doCleanPublic()
}

//////////////////////////////////////////////////////////////////////////////
//
def doCleanPublic() {
  delete (includeemptydirs: 'true') {
    fileset (erroronmissingdir: 'false', dir: "${basedir}/public/scripts", includes: '**/*')
    fileset (erroronmissingdir: 'false', dir: "${basedir}/public/styles", includes: '**/*')
    fileset (erroronmissingdir: 'false', dir: "${basedir}/public/pages", includes: '**/*')
    fileset (erroronmissingdir: 'false', dir: "${basedir}/public/ig", includes: '**/*')
  }
  mkdir (dir: "${basedir}/public/ig")
}

//////////////////////////////////////////////////////////////////////////////
//
def doBuildWebApps() {
  if ("web" == "${buildType}") {
    new File("${webDir}").eachDir( { f ->
      doBuildOneWebApp(f)
    });
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doBuildOneWebApp (dir) {
  final wappid= dir.getName()

  mkdir (dir: "${buildDir}/web_scripts/${wappid}")
  mkdir (dir: "${buildDir}/web_styles/${wappid}")
  if ("clojurescript" == "${jslang}") {
    doCompileCljScript(wappid)
  }
  if ("typescript" == "${jslang}") {
    doCompileTypeScript(wappid)
  }
  if ("coffee" == "${jslang}") {
    doCompileCoffeeScript(wappid)
  }
  doCompileJS(wappid)
  if ("less" == "${csslang}") {
    doCompileLESS(wappid)
  }
  if ("scss" == "${csslang}") {
    doCompileSCSS(wappid)
  }
  doCompileMedia(wappid)
  doCompileInfo(wappid)
  doCompilePages(wappid)
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileCljScript(wappid) {
  final sdir= "${webDir}/${wappid}/scripts"
  copy (todir: "${buildDir}/web_scripts/${wappid}") {
    fileset (dir: "${sdir}") {
      include (name: '**/*.cljs')
    }
  }
  java (
        classname: 'clojure.main',
        fork: 'true',
        failonerror: 'true',
        maxmemory: '2048m',
        classpathref: 'compile.path.id') {
    arg (value: "${basedir}/conf/cljsc.clj")
    arg (value: "${sdir}")
    arg (value: 'true')
    // advanced none whitespace simple
    arg (value: 'none')
    arg (value: "${buildDir}/web_scripts/${wappid}")
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doFinzBuild() {
    /*
      <fileset file="${basedir}/public/vendors/fsm/state-machine.min.js"/>
      <fileset file="${basedir}/public/vendors/zepto/zepto.min.js"/>
      <fileset file="${basedir}/public/vendors/modernizr/modernizr.custom.js"/>
      */
  delete (file: "${basedir}/public/c/webcommon.js", quiet: 'true')
  concat (destfile: "${basedir}/public/c/webcommon.js", append: 'true') {
    fileset (file: "${basedir}/public/vendors/underscore/underscore-min.js")
    fileset (file: "${basedir}/public/vendors/jquery/jquery-2.1.1.min.js")
    fileset (file: "${basedir}/public/vendors/l10njs/l10n.min.js")
    fileset (file: "${basedir}/public/vendors/mustache/mustache.js")
    fileset (file: "${basedir}/public/vendors/helpers/dbg.js")
    fileset (file: "${basedir}/public/vendors/jquery_plugins/detectmobilebrowser.js")
    fileset (file: "${basedir}/public/vendors/jquery_plugins/jquery.cookie.js")
    fileset (file: "${basedir}/public/vendors/crypto-js/components/core-min.js")
    fileset (file: "${basedir}/public/vendors/crypto-js/components/enc-utf16-min.js")
    fileset (file: "${basedir}/public/vendors/crypto-js/components/enc-base64-min.js")
    fileset (file: "${basedir}/public/vendors/cherimoia/skaro.js")
    fileset (file: "${basedir}/public/vendors/cherimoia/caesar.js")
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileTypeScript(wappid) {
  copy (todir: "${buildDir}/web_scripts/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/scripts") {
      include (name: '**/*.ts')
    }
  }
  exec (executable: 'tsc', dir: "${buildDir}/web_scripts/${wappid}") {
    arg (value: '--outDir')
    arg (value: '--output')
    arg (value: "${buildDir}/web_scripts/${wappid}")
    arg (value: '**/*.ts')
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileCoffeeScript(wappid) {
  copy (todir: "${buildDir}/web_scripts/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/scripts") {
      include (name: '**/*.coffee')
    }
  }
  exec (executable: 'coffee') {
    arg (value: '--bare')
    arg (value: '--output')
    arg (value: "${buildDir}/web_scripts/${wappid}")
    arg (value: '--compile')
    arg (value: "${buildDir}/web_scripts/${wappid}")
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileJS(wappid) {
  copy (todir: "${buildDir}/web_scripts/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/scripts")
  }
  mkdir (dir: "${basedir}/public/ig/lib/game")
  mkdir (dir: "${basedir}/public/scripts")
  switch (wappid) {
    case "cocos2d":
      copy (todir: "${basedir}/public/ig/lib") {
        fileset (dir: "${buildDir}/web_scripts/${wappid}")
      }
    break
    case "main":
      copy (todir: "${basedir}/public/scripts") {
        fileset (dir: "${buildDir}/web_scripts/${wappid}")
      }
    break
    default:
      copy (todir: "${basedir}/public/ig/lib/game/${wappid}") {
        fileset (dir: "${buildDir}/web_scripts/${wappid}/game")
      }
    break
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileLESS(wappid) {
  copy (todir: "${buildDir}/web_styles/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/styles") {
      include (name: '**/*.less')
    }
  }
  apply (executable: "lessc", parallel: 'false') {
    fileset (dir: "${buildDir}/web_styles/${wappid}") {
      include (name: '**/*.less')
    }
    srcfile ()
    chainedmapper () {
      mapper (type: 'glob', from: '*.less', to: '*.css')
      globmapper (from: '*', to: "${buildDir}/web_styles/${wappid}/*")
    }
    targetfile ()
  }
  copy (todir: "${buildDir}/web_styles/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/styles") {
      include (name: '**/*.css')
    }
  }
  mkdir (dir: "${basedir}/public/styles/${wappid}")
  copy (todir: "${basedir}/public/styles/${wappid}") {
    fileset (dir: "${buildDir}/web_styles/${wappid}") {
      include (name: '**/*.css')
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileSCSS(wappid) {
  copy (todir: "${buildDir}/web_styles/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/styles"){
      include (name: '**/*.scss')
    }
  }
  apply (executable: 'sass', parallel: 'false') {
    fileset (dir: "${buildDir}/web_styles/${wappid}") {
      include (name: '**/*.scss')
    }
    srcfile ()
    chainedmapper() {
      mapper (type: 'glob', from: '*.scss', to: '*.css')
      globmapper (from: '*', to: "${buildDir}/web_styles/${wappid}/*")
    }
    targetfile ()
  }
  copy (todir: "${buildDir}/web_styles/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/styles") {
      include (name: '**/*.css')
    }
  }
  mkdir (dir: "${basedir}/public/styles/${wappid}")
  copy (todir: "${basedir}/public/styles/${wappid}") {
    fileset (dir: "${buildDir}/web_styles/${wappid}") {
      include (name: '**/*.css')
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileMedia(wappid) {
  mkdir (dir: "${basedir}/public/ig/media/${wappid}")
  copy (todir: "${basedir}/public/ig/media/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/media") {
      include (name: '**/*')
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompileInfo(wappid) {
  switch (wappid) {
    case "cocos2d":
    break
    case "main":
    break
    default:
      mkdir (dir: "${basedir}/public/ig/info/${wappid}")
      copy (todir: "${basedir}/public/ig/info/${wappid}") {
        fileset (dir: "${webDir}/${wappid}/info") {
          include (name: '**/*')
        }
      }
    break
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doCompilePages(wappid) {
  mkdir (dir: "${basedir}/public/pages/${wappid}")
  copy (todir: "${basedir}/public/pages/${wappid}") {
    fileset (dir: "${webDir}/${wappid}/pages") {
      include (name: '**/*')
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doYuiCSS() {
  apply (executable: 'java', parallel: 'false') {
    fileset (dir: "${basedir}/public/styles") {
      exclude (name: '**/*.min.css')
      include (name: '**/*.css')
    }
    arg (line: '-jar')
    arg (path: "${skaroHome}/lib/yuicompressor-2.4.7.jar")
    srcfile ()
    arg (line: '-o')
    chainedmapper () {
      mapper (type: 'glob', from: '*.css', to: '*.min.css')
      globmapper (from: '*', to: "${basedir}/public/styles/*")
    }
    targetfile ()
  }
}

//////////////////////////////////////////////////////////////////////////////
//
def doYuiJS() {
  apply (executable: 'java', parallel: 'false') {
    fileset (dir: "${basedir}/public/scripts") {
      exclude (name: '**/*.min.js')
      include (name: '**/*.js')
    }
    arg (line: '-jar')
    arg (path: "${skaroHome}/lib/yuicompressor-2.4.7.jar")
    srcfile ()
    arg (line: '-o')
    chainedmapper () {
      mapper (type: 'glob', from: '*.js', to: '*.min.js')
      globmapper (from: '*', to: "${basedir}/public/scripts/*")
    }
    targetfile ()
  }
}

//////////////////////////////////////////////////////////////////////////////
//
  /*
       public TARGETS
       */

target (release: '') {
  depends (buildr)
  doYuiCSS()
  doYuiJS()
  doFinzBuild()
}

target (devmode: '') {
  depends (buildr)
  doFinzBuild()
}

target (test: '') {
  depends(testBuild)
}

target (newapp: '') {
  input (message: "Enter app-name: ", addproperty: 'appid')
  println "Creating new game: ${appid}"
  mkdir (dir: "${webDir}/${appid}")
  ["media/game", "media/gui" , "scripts/device",
   "scripts/game/entities" ,
   "scripts/game/i18n", "scripts/game/levels"].each { s ->
    mkdir (dir: "${webDir}/${appid}/${s}")
  }
  ["info" , "pages" , "styles"].each { s ->
    mkdir (dir: "${webDir}/${appid}/${s}")
  }
  copy (file: "${srcDir}/resources/game.manifest", todir: "${webDir}/${appid}/info")
  copy (file: "${srcDir}/resources/index.html", todir: "${webDir}/${appid}/pages")
  copy (file: "${srcDir}/resources/main.scss", todir: "${webDir}/${appid}/styles")
  final appkey= UUID.randomUUID()
  tstamp () {
    format (property: "pubtime", pattern: "yyyy-MM-dd")
  }
  replace (file: "${webDir}/${appid}/info/game.manifest", token: "@@PUBDATE@@", value: "${pubtime}")
  replace (file: "${webDir}/${appid}/info/game.manifest", token: "@@UUID@@", value: "${appkey}")
  replace (file: "${webDir}/${appid}/pages/index.html", token: "@@APPID@@", value: "${appid}")
  touch (file: "${webDir}/${appid}/scripts/game/i18n/game_en_US.js")
  ["config.js","game.js", "splash.js", "mmenu.js", "hud.js"].each { s ->
    touch (file: "${webDir}/${appid}/scripts/game/${s}")
  }
  ["resource.js","app.js"].each { s ->
    touch (file: "${webDir}/${appid}/scripts/device/${s}")
  }
  mkdir (dir: "${basedir}/cocos")
  exec (executable: 'cocos') {
    arg (value: 'new')
    arg (value: '-l')
    arg (value: 'js')
    arg (value: '-t')
    arg (value: 'runtime')
    arg (value: '--ios-bundleid')
    arg (value: "com.zotohlab.${appkey}")
    arg (value: '-d')
    arg (value: "${basedir}/cocos")
    arg (value: "${appid}")
  }
}

target (deployapp: '') {
  input (message: "Enter app-name: ", addproperty: 'appid')
  final despath= "${basedir}/cocos/${appid}"
  final srcpath= "${webDir}/${appid}"
  final des= new File("${despath}")
  final src= new File("${srcpath}")
  final dd2 = new File(des, "res")
  final dd1 = new File(des, "src")
  final dd2path= dd2.getCanonicalPath()
  final dd1path= dd1.getCanonicalPath()

  if ( ! des.exists() ||
       ! src.exists()) {
    println "Invalid game: ${appid}"
  } else {
    println "Deploying game: ${appid}"
    dd2.deleteDir()
    dd1.deleteDir()
    dd2.mkdirs()
    dd1.mkdirs()
    copy (todir: dd2path) {
      fileset (dir: "${srcpath}/media")
    }
    copy (todir: "${dd1path}/game") {
      fileset (dir: "${srcpath}/scripts/game")
    }
    copy (todir: dd1path) {
      fileset (dir: "${srcpath}/scripts/device") {
        include (name: "resource.js")
        include (name: "app.js")
      }
    }
    copy (todir: despath) {
      fileset (dir: "${srcpath}/scripts/device") {
        exclude (name: "resource.js")
        exclude (name: "app.js")
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
// EOF
